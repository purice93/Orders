课程目标:
您将在Java中实现一个内存/匹配游戏。您可以在moodle页面上看到它的一个演示链接。

这个游戏有一个按钮网格，它代表你可以翻转的卡片。一开始，所有的按钮都显示为灰色或灰色，所以你不知道下面是什么颜色。你会一次翻两下，一次，如果他们匹配你就会得到分数。
它在顶部和底部也有标签，说明它是谁的，玩家的分数，以及他们应该做什么。
玩家将选择一个按钮然后另一个按钮。当他们选择按钮时，他们的按钮将显示其颜色。
如果玩家选择两个按钮相同的色彩,游戏会告诉他们,当他们再次点击任何按钮(继续)的两个按钮有正确的将黑色和球员另一个尝试选择两个按钮。
玩家可能不会两次选择同一个按钮，也可能不会选择一个黑色按钮。
如果玩家选择了两个不同颜色的按钮，那么游戏就会告诉他们，当他们再次点击的时候，就会变成另一个玩家的回合。
当所有的按钮都是黑色的时候，游戏会告诉玩家赢了(或者是平局)，当他们按下OK按钮时，它又开始了。
在任何时候，游戏都告诉玩家，使用两个标签会发生什么――一个是在窗口的顶部，一个是在窗口底部的玩家1。活动玩家的消息应该有一个绿色背景，而另一个玩家的消息应该有一个红色背景。


评估要求:注意前面的需求是故意更精确/分步比后期的。
您可能希望更多地参考这些提示，以了解以后的需求。
1。
创建一个主类并使用您的资本化的用户名来命名它。
如我的用户名是pszja所以我称之为PszjaMain(注意,类应该总是有一个大写字母作为第一个字母)。
2。
创建一个main()函数,并确保你的主要功能做的只有一件事:创建类的实例。
如果你不想做这个工作在构造函数中,你可以(如果你愿意)立即调用一个方法上的新对象,但你不应该创建一个对象引用变量来存储创建的对象的引用(没有必要)。
如果您完成的代码正常工作，应该可以创建两个类实例，并同时拥有两个完全独立的游戏副本，就像我在演示视频中所做的那样。
主类的其他方法都不应该是静态的。

完成：两个副本

3。
创建5个最终的静态int的数据成员为您的主类/属性:
宽度――你显示的按钮的宽度
二世。
高度――显示的按钮的数量
三世。
颜色(您可以使用美国拼写颜色如果你愿意)――不同颜色的数量你将为你的按钮
iv。MAX_PER_COLOUR按钮的数量每个颜色的
诉BUT_SIZE――每个按钮的大小(以像素为单位)
这些将是常量(final意味着您不能更改值)，并且应该确保您使用这些名称而不是本类代码中的实际数字。
例如创建一个按钮使其宽度等于BUT_SIZE而不是100年。
您可以创建这些，并且应该在代码中适当地使用它们，而不是硬编码数字。
注意:您应该设置这些值,以便宽*高= MAX_PER_COLOUR *颜色,和MAX_PER_COLOUR偶数(这样你就可以把方块)。
您的程序不需要验证这一点(假设它永远不会被设置为奇数)。
我们希望看到它运行一个4×4网格每颜色4颜色和广场,以及与网格和8 8 8的颜色。
4。
创建一个buttonClicked(int iButton)方法(不是静态!)在你的主类(可以更改名称/参数名称如果你愿意)。


5。
创建一个ColorButton类的子类JButton。
添加一个构造函数,至少需要四个参数,指定一个数字按钮(int),你的主要类对象的引用和最低/优先按钮的宽度和高度。
设置适当的大小，并存储主对象引用和成员变量中的按钮编号(参见步骤10)。
6。
你的按钮代表了匹配游戏中的卡片。
他们可以有三个州――显示卡片的背面(灰色),展示牌的前面(即把卡交给看到它是什么颜色的,在这种情况下,按钮显示指定的颜色)或完成(相当于拿走的卡片因为他们匹配――在这种情况下让他们黑)。
多加一变量来管理一个按钮的状态(显示显示颜色/前,显示/显示灰色,或带走/已经完成/显示黑色。
初始化这个状态对于每一个按钮来显示卡片的背面(灰色)。
7。
将一个方法添加到名为flip()的新按钮类中，该类具有一个布尔参数，指定按钮是否应该显示其颜色。
调用翻转(真正的)应该使按钮显示其前面(即显示隐藏的颜色)和调用翻转(假)应该使按钮显示(即灰色)。
8。
添加一个变量来存储真正的按钮颜色。
添加一个set.方法，当一个颜色被分配给按钮时，允许这个变量的值被设置。
9。
按钮类的实现适当的画方法绘制按钮在适当的颜色取决于按钮的状态:黑色如果按钮已经完成,灰色如果没有被选中,和适当的颜色是否被选中。


10。
将一个侦听器添加到按钮,按钮本身知道当它已经按下并调用buttonClicked()方法的主要类,告诉它哪个按钮被点击数量。

在这一点上，我在继续之前测试了我的颜色按钮类。

现在回到您的主类。
当您实现代码时，请记住使用您在步骤3中创建的常量。
如果您愿意，可以使用一个主类或创建其他类来实现功能，这取决于您。
11。
执行您的主程序来创建JFrame。
12。
在你的框架的顶部和底部添加两个标签-这些将显示玩家的状态并告诉他们他们的分数和该做什么。
给标签适当的字体和背景颜色。
13。
在主对象中实现适当的变量以保持当前状态。
如您需要知道每个球员的得分,该轮到谁了,目前正在发生(例如是当前玩家要选择第一个广场,第二个正方形或单击一个按钮继续成功或失败后)。
您可能还需要实现其他变量，无论是在主对象上还是在按钮对象上――可以自由地这样做。
14。
实现一个方法，该方法将考虑当前状态，并在标签上显示适当的消息，告诉玩家该做什么。
15。
在每个标签上设置适当的背景颜色，以便当前播放器的标签是绿色的，而另一个播放器是红色的。
16。
确保每个球员的当前分数在球员的标签上正确地显示。
17所示。
在框架的中心添加一个宽度x高度颜色按钮的网格，并给每个不同的数字，这样你就可以识别哪个是按下的。
18岁。
随机将颜色分配给按钮。
19所示。
确保不同颜色的数量等于颜色常数。
20。
确保有MAX_PER_COLOUR每个颜色的按钮。
21。
一个玩家应该能够选择第一个方块，当玩家选择它的时候，它应该被显示出来。
玩家不应该能够选择一个完成(即黑)广场(任何点击黑色广场应该被忽略)。
这场比赛应该会促使他们选择第二场比赛。
22。
一个玩家应该能够选择第二个方块，当玩家选择它的时候，它应该被显示出来。
他们不能选择与第一个方块相同的方块，也不能选择一个黑色方块(如果他们这样做，那么忽略点击，这样他们就可以选择另一个方块)。
23。
在选择第二个方块之后，游戏应该检查他们是否找到了匹配。
如果他们这样做了，那么应该在标签上告诉玩家，并提示点击任何方块继续。
如果他们不匹配，那么玩家应该被告知，并提示点击一个方块继续。
24。
点击继续，如果玩家匹配两个方块的颜色，将两个方块都变黑，玩家将得到2个点。
25。
在正确匹配方块和方块的黑色之后，玩家将得到另一个go，并提示选择一个新的第一个方块。


26岁。
如果玩家失败了，那么游戏应该将方块重新变成灰色，这样两个玩家都不能通过调用两个按钮上的翻转(错误的)方法来看到他们的颜色。
游戏应该移到另一个玩家，让他们选择第一个方块，继续游戏。
27。
如果所有的方块都变黑,那么游戏应该显示一个消息窗口(例如使用JOptionPane)说谁是赢家,一个球员或画基于最点。
28。
在消息说谁是赢家之后，国家应该重新设置允许另一个游戏的播放，并为按钮设置新的随机颜色。
29。
在最后的两个标记中，实现一个迭代器模式，以便某些类支持可迭代的接口，并生成一个迭代器，该迭代器允许您遍历按钮。
例如，您可以使用它来查看是否所有按钮都被单击了，或者您可以在某些测试代码中使用它来进行测试。
30。
这个标记用于迭代器的迭代器模式，它可以很好地工作。

充分测试你的游戏。
您可能会发现，将按钮的数量减少到2x2和颜色到2是非常有用的，可以快速测试诸如在玩家获胜时显示的最终消息。