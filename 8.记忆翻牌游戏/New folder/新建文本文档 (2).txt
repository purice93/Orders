注意:这个文档可能随着答案的增长而增长
1。
您应该已经知道如何创建类了。
请注意,您可能想要告诉您的IDE创建一个主要()函数你也当你创建类(见2)。
2。
你已经看到我在main中创建了类的实例，并在几次课上直接调用了一个方法。
3。
这里的硬点是记住在整个程序中使用这些常量而不是硬编码的数字——这就是为什么我把这个放在需求列表的开始处。
声明普通成员变量并添加关键字final(就像您需要添加静态以使变量静态)。
这使它成为一个常量，因此在创建它之后，您永远无法更改它的值。
这意味着您必须在创建它的时候设置它的值。
4。
您需要这个函数，因为您的按钮稍后将调用它(步骤10)。
现在提供它(即使没有实现)，意味着您可以首先专注于获得色彩按钮。
5。
看看颜色标签是如何实现的，因为它是如此相似。
如果你的主类被称为PszjaMain那么这个类的一个对象引用将类似“PszjaMain mainClassObject”。
您应该在构造函数的构造函数和该类型的成员变量在按钮对象中有一个参数。
构造函数应该将参数的值存储到成员变量中，以便在以后需要时可用。
即如果按钮需要使用主类对象(参见步骤10)然后它有这个引用对象可以使用。
6。
我用两个变量每个按钮的状态——一个按钮是否已经完成(是黑色的),一个用于目前是否显示(即灰色或彩色)。
你可以按每个按钮的一个变量来做，不过如果你愿意的话。
7。
它的意思是，当你选择一个按钮时，它的作用就相当于把卡片翻转过来看另一边是什么颜色。
即选择它将揭示隐藏的色彩。
之后，如果按钮不匹配，它会再次翻转，再次显示灰色。
这应该是很容易做到的——它就像一个setter方法，但是需要适当地设置属性的值。
如果你希望你能阻止一个完成的按钮被翻转，但是它将取决于你如何实现这个按钮。
8。
按钮需要知道绘制的颜色，你的主代码将设置这些-参见步骤18-20。


9。
如果按钮完成了，不管按钮是否被翻转，它都应该是黑色的。
10。
请记住，对主对象和按钮号的引用都存储在每个按钮的属性中——看看您在步骤5中对构造函数做了什么。
 
11。
这并不是很难做到的——请参阅第2步，并确保它与您在步骤2中所做的工作联系在一起。
12。
为了让颜色出现，你可能需要告诉你的标签，它们是不透明的，而不是透明的。
这样做的功能应该是显而易见的。
您以前见过设置字体。
13。
不要让这些变量静态！！！
如果你这样做了，你将无法同时在同一个程序中运行两个实例。
14。
这应该显示出它是谁，比分是多少，以及当前的球员应该做什么。
15。
参见第12步。
这里的重点是随着比赛的进行，颜色会随着时间的推移而改变——即，红色和绿色会改变球员的位置。
16。
这意味着要确保正确地显示了分数。
17所示。
注意常量的使用。


18岁。
这可能有点棘手。
有很多方法可以做到这一点。
我个人保持跟踪每个颜色的我创造了多少按钮,然后随机选择的颜色按钮,选择一个新的颜色如果按钮的最大数量的颜色已经被创建。
我们不会要求你用超过8种颜色来运行它。
你可以使用多种不同的标准颜色，例如颜色。
红色，颜色。
蓝色等等。你可以使用switch语句来确定颜色，或者创建一个颜色对象引用数组，或者随机类是一个创建随机数的好方法。
只是创建其中一个对象，而不是这些对象中的一个。
19所示。
参见步骤18
20。
参见步骤18
21。
想想翻转按钮()方法,您需要的状态变量和/或已经实施。
考虑步骤12 - 15。
22。
和你在第21步中所做的非常相似，尽管玩家不能两次选择相同的步骤。
23。
与第21步相同，但这需要完成单击的结果。
24。
注意，有些事情只在第三次点击之后才会发生，即使你已经知道了第23步会发生什么。
25。
这将测试您是否能够正确地将状态恢复到初始状态。
你可能会发现设置原始状态和重置状态是很有用的，同样的函数，从这两个地方调用它。
26岁。
这涉及到一些状态更改。


27。
你可以检查每一个方块的状态，或者看看有多少个点被得分，或者你能想到的任何其他方法都是有效的。
显示消息窗口,查找JOptionPane。
习惯于查找类的工作方式是一个好主意，并且为您提供类名以查找web上的大量示例。
我使用了showMessageDialog(框架、…)在我的代码静态方法。
注意，执行这个函数调用将意味着在窗口关闭之前执行的代码行将不会被执行，这可能正是您想要的。
28。
这个要求就是把状态恢复到原来的状态。
29。
这个标记用于实现可迭代模式，以创建一个合适的迭代器实例。
只要您可以在某个地方使用它来演示代码，就不需要使用迭代器作为游戏的基本部分。
如果你想使用它,而不是把一些测试代码来演示,然后检查所有按钮被黑,或分配的随机颜色按钮可以使用迭代器是两个地方。
30。
这个标记用于迭代器实例，它可以正确地遍历对象。
您应该能够将其演示给标记。